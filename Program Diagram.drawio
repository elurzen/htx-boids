<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0" version="28.1.0">
  <diagram name="Page-1" id="Xs04RNJFylX2Sl9t9YBy">
    <mxGraphModel dx="4398" dy="1581" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="gzoKoLbx1u-RwGfraSK8-8" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="gzoKoLbx1u-RwGfraSK8-1" target="gzoKoLbx1u-RwGfraSK8-7">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-1" value="&lt;div style=&quot;line-height: 200%;&quot;&gt;&lt;div align=&quot;center&quot;&gt;&lt;b&gt;SpeciesManager&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ul&gt;&lt;li&gt;access point for the species collection dict.&amp;nbsp;&lt;/li&gt;&lt;li&gt;keeps track of activeSpecies in the settings drop down&lt;/li&gt;&lt;li&gt;calls create species (SpeciesActions) for each species in the dict&lt;/li&gt;&lt;li&gt;handles all inputs for species related actions and calls the appropriate function in SpecieActions&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="-1140" y="75" width="390" height="180" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-6" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="gzoKoLbx1u-RwGfraSK8-2" target="gzoKoLbx1u-RwGfraSK8-1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-2" value="&lt;div style=&quot;line-height: 200%;&quot;&gt;&lt;div&gt;&lt;b&gt;SpeciesCollection&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;Reads resource files from .tscn files and stores them in a dictionary that is available as readonly&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-1390" y="95" width="160" height="140" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-5" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="gzoKoLbx1u-RwGfraSK8-4" target="gzoKoLbx1u-RwGfraSK8-2">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-4" value="&lt;div&gt;&lt;b&gt;SpeciesResouce&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 200%;&quot;&gt;resource file for species, contains modifiable variables and defaults&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-1680" y="100" width="200" height="130" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-10" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="gzoKoLbx1u-RwGfraSK8-7" target="gzoKoLbx1u-RwGfraSK8-9">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-7" value="&lt;div style=&quot;line-height: 200%;&quot;&gt;&lt;div align=&quot;center&quot;&gt;&lt;b&gt;SpeciesActions&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ul&gt;&lt;li&gt;parent to all aspecies node&lt;/li&gt;&lt;li&gt;Calls SetSpeciesData() after creating species to give it a reference to the SpeciesResource&lt;/li&gt;&lt;li&gt;handles spawning and killing boid input actions&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;" style="whiteSpace=wrap;html=1;align=left;rounded=0;spacingRight=0;" vertex="1" parent="1">
          <mxGeometry x="-1100.62" y="350" width="311.25" height="170" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-16" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="gzoKoLbx1u-RwGfraSK8-9" target="gzoKoLbx1u-RwGfraSK8-18">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="-943.7599999999996" y="1200" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-9" value="&lt;div style=&quot;line-height: 200%;&quot;&gt;&lt;div align=&quot;center&quot;&gt;&lt;font style=&quot;font-size: 13px; line-height: 200%;&quot;&gt;&lt;b&gt;Species (multiple)&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;div&gt;&lt;font style=&quot;font-size: 13px; line-height: 200%;&quot;&gt;specific species node for all boids of that species&lt;/font&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;&lt;font style=&quot;font-size: 13px; line-height: 200%;&quot;&gt;has functions for spawning and killing boids of this species&lt;/font&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;&lt;font style=&quot;font-size: 13px; line-height: 200%;&quot;&gt;UpdateSetting() function handles updating values on the species resource so the updated values are used in following movement calculations&lt;/font&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;&lt;font style=&quot;font-size: 13px; line-height: 200%;&quot;&gt;if radius is updated, each existing boid needs it&#39;s radii updated so it emits a signal that is handled by BoidDetection to change all of the existing boids radaii to the new value&lt;/font&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;" style="whiteSpace=wrap;html=1;rounded=0;spacingRight=0;align=left;" vertex="1" parent="1">
          <mxGeometry x="-1230" y="630" width="571.24" height="260" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-20" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" edge="1" parent="1" source="gzoKoLbx1u-RwGfraSK8-21" target="gzoKoLbx1u-RwGfraSK8-19">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="-580" y="1090" as="sourcePoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-18" value="&lt;div style=&quot;line-height: 200%;&quot;&gt;&lt;div align=&quot;center&quot;&gt;&lt;font style=&quot;font-size: 13px; line-height: 200%;&quot;&gt;&lt;b&gt;Boid (multiple)&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;div&gt;Has references to _species.SpeciesResourceNode.Parameter so force calculation code is clean, concise, and consistent&lt;/div&gt;&lt;/li&gt;&lt;li&gt;Speed, jitter timer, current direction, and it&#39;s polygon2D skin are local to it&lt;/li&gt;&lt;li&gt;_Ready() adds it to obstacles, sets it direction randomly, rotates it so it&#39;s facing the right way, and creates / adds a jitter timer to it&lt;/li&gt;&lt;li&gt;AddJitterTimer() creates and appends a jitter timer to the boid that changes canjitter to true when it emits it&#39;s timeout signal&lt;/li&gt;&lt;li&gt;ResetJitterTimer() - sets can jitter = false and restarts the countdown&lt;/li&gt;&lt;li&gt;RandomSpawn() - creates a random vector2 and sets the boids direction to it&lt;/li&gt;&lt;li&gt;SetDirection() - sets boid&#39;s direction to a normalized vector and rotates it to match&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;" style="whiteSpace=wrap;html=1;rounded=0;spacingRight=0;align=left;" vertex="1" parent="1">
          <mxGeometry x="-1209.68" y="1010" width="530.62" height="320" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-19" value="&lt;div style=&quot;line-height: 200%;&quot;&gt;&lt;div align=&quot;center&quot;&gt;&lt;font style=&quot;font-size: 13px; line-height: 200%;&quot;&gt;&lt;b&gt;BoidDetection&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;div&gt;Maintains the CollisonShapes, associated polygon2d&#39;s, and detection hashsets for each boid&lt;/div&gt;&lt;/li&gt;&lt;li&gt;_Ready() - Calls InitFuctions Deferred&lt;/li&gt;&lt;li&gt;OnRadaiiUpated() - Event handler for RadaiiUpated Signal emitted from the Speices Node&lt;/li&gt;&lt;li&gt;InitDetection() - registers the boid, it&#39;s collison shapes, and it&#39;s polygon2d&#39;s&lt;/li&gt;&lt;li&gt;InitSignals() - attaches functions to the collider enter/exit events, as well as a function to update the radaii when Species emits the radaii changed signal&lt;/li&gt;&lt;li&gt;OnCollisonBodyEntered() - adds anything in the &quot;obstacle&quot; group to the obstacle hashset&lt;/li&gt;&lt;li&gt;OnCollisionBodyExited() - Removes anything that exits the collision radius&lt;/li&gt;&lt;li&gt;OnVisionBodyEntered()&amp;nbsp; - Adds lights and boids of the same species to the vision radius hashset&lt;/li&gt;&lt;li&gt;OnVisionBodyExited() - removes any body that exits the radius&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;" style="whiteSpace=wrap;html=1;rounded=0;spacingRight=0;align=left;" vertex="1" parent="1">
          <mxGeometry x="-1228.76" y="2040" width="570" height="370" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-30" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="gzoKoLbx1u-RwGfraSK8-21" target="gzoKoLbx1u-RwGfraSK8-29">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-21" value="&lt;div style=&quot;line-height: 200%;&quot;&gt;&lt;div align=&quot;center&quot;&gt;&lt;font style=&quot;font-size: 13px; line-height: 200%;&quot;&gt;&lt;b&gt;BoidMovement&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;div&gt;Handles modifying movement of boids&lt;/div&gt;&lt;/li&gt;&lt;li&gt;_Ready() - sets screensize (for screen wrap) and adds wallflip timer&lt;/li&gt;&lt;li&gt;_Process() - Backbone of boid movement, calls functions to move boid every cycle (update direction, wallbounce, and screenwrap)&lt;/li&gt;&lt;li&gt;UpdateDirectionAndSpeed() - Calls the force calculator to get target direction (vec2). if it&#39;s not 0 it calculates the interpolated direction is should move based on the boid&#39;s max turnrate and then sets it&#39;s direction and rotation. Also adjusts the speed of the boid towards the average calculated in the force calculator accounting for the speed adjustment value. clamps it to min/max speed&lt;/li&gt;&lt;li&gt;ScreenWrap() - teleports boid to other side of the screen if it goes off the edge of the screen&lt;/li&gt;&lt;li&gt;WallBounce() - gets the first wall the boid collided with and uses the bounce function to make it effectively reflect off of the wall, can only occur once every second&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;" style="whiteSpace=wrap;html=1;rounded=0;spacingRight=0;align=left;" vertex="1" parent="1">
          <mxGeometry x="-1229.37" y="1530" width="570" height="370" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-22" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="gzoKoLbx1u-RwGfraSK8-18" target="gzoKoLbx1u-RwGfraSK8-21">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-29" value="&lt;div style=&quot;line-height: 200%;&quot;&gt;&lt;div align=&quot;center&quot;&gt;&lt;b&gt;ForceCalculator (static)&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;div&gt;CalculateTargetAndSpeed() - Uses helper functions to generate a direction the boid should try to move based on each subforce * their weight. Also returns the desired new speed based on the average speed each friendly neighbor&lt;/div&gt;&lt;/li&gt;&lt;li&gt;CalculateRepulsionForces() - Calculates all forces based on objects in the ObstaclesHashset.&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Averages location of all obstacles and returns a normalized vector pointing away from it&lt;/li&gt;&lt;li&gt;Averages location of all walls and returns a normalized vector of it (done so wall can have a much higher weight than other obstacles)&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;CalculateAttractionForces() - Calculates all forces based on objects in the VisionHashSet.&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Finds average position of all lights in range and returns it as a normalized vector pointing from the boid to the light (done so lights can have different weights)&lt;/li&gt;&lt;li&gt;Alignment finds the average heading of all boids of the same species and returns it as a normalized vector&lt;/li&gt;&lt;li&gt;Cohesion finds the average position of all boids of the same species and returns a normalized vector pointing from the boid to the average position&lt;/li&gt;&lt;li&gt;Speed finds the average speed of all boids of the same species and returns a speed adjustment value that is the average speed - the boid&#39;s speed&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;CalculateaJitterForce() - Checks to see if the boid can generate a new jitter direction, if it can it generates a new random vector2 and normalizes it. It then returns the normalized vector * (timeleft / totalwaittime) this makes it so the jitter force is strong at first but fades in power the older it is.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;" style="whiteSpace=wrap;html=1;rounded=0;spacingRight=0;align=left;dashed=1;dashPattern=8 8;" vertex="1" parent="1">
          <mxGeometry x="-480" y="1425" width="570" height="580" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-33" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="gzoKoLbx1u-RwGfraSK8-31" target="gzoKoLbx1u-RwGfraSK8-32">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-31" value="&lt;div style=&quot;line-height: 200%;&quot;&gt;&lt;div align=&quot;center&quot;&gt;&lt;b&gt;PlaceableManager&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ul&gt;&lt;li&gt;Defines TILE_SIZE for use with tiling system&lt;/li&gt;&lt;li&gt;Defines a _paintbrush delegate for PlaceableActions functions that takes a vector2 intended to designate a tile&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li&gt;_Ready() - finds the PlaceableAction node and sets this node to handle inputs&lt;/li&gt;&lt;li&gt;_Process() - if the user is holding an input key, continuously call the related function at the closest tile to the cursor&lt;/li&gt;&lt;li&gt;_UnhandledInput - Parses inputs from user and checks to see if they are a placeable input, calls the appropriate function in PlaceableActions if so.&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Needs to check &quot;do action to ALL&quot; events first and return if it is one since the non-modifier key triggers too with the modifier key is held.&lt;/li&gt;&lt;li&gt;If it&#39;s an action that affects a single tile, assigns the related function to _paintbrush so _process can call it - this allows for &quot;painting&quot; rather than firing once per button press.&amp;nbsp;&lt;/li&gt;&lt;li&gt;On action release of the action related to _paintbrush it nulls it out so the drawing stops.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="-425" y="75" width="570" height="420" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-35" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" edge="1" parent="1" source="gzoKoLbx1u-RwGfraSK8-32" target="gzoKoLbx1u-RwGfraSK8-34">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-32" value="&lt;div style=&quot;line-height: 200%;&quot;&gt;&lt;div align=&quot;center&quot;&gt;&lt;b&gt;PlaceableActions&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ul&gt;&lt;li&gt;Holds references to all placeable object scenes&lt;/li&gt;&lt;li&gt;Defines a dictionary to keep track of &amp;lt;tile, placeable&amp;gt; pairs - allows manipulation of specific objects and prevents multiple objects from being placed in the same tile&lt;/li&gt;&lt;li&gt;Defines functions called by PlaceablesManager, they take a tile as an input if it only affects one tile and update the dictionary appropriately&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="-335" y="640" width="390" height="240" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-38" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.25;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="gzoKoLbx1u-RwGfraSK8-34" target="gzoKoLbx1u-RwGfraSK8-36">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-39" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.75;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="gzoKoLbx1u-RwGfraSK8-34" target="gzoKoLbx1u-RwGfraSK8-37">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-34" value="&lt;div style=&quot;line-height: 200%;&quot;&gt;&lt;div align=&quot;center&quot;&gt;&lt;b&gt;Placeable (abstract class)&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ul&gt;&lt;li&gt;Parent class for all placeables, adds object to &quot;obstacles&quot; in _Ready()&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="-355" y="1000" width="430" height="180" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-36" value="&lt;div style=&quot;line-height: 200%;&quot;&gt;&lt;div align=&quot;center&quot;&gt;&lt;b&gt;Wall&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ul&gt;&lt;li&gt;_Ready() - adds object to &quot;walls&quot; group&lt;/li&gt;&lt;li&gt;Has a collider on same layer as the Boid hitbox, allowing collisions between the two - this generally triggers the WallBounce() function&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="345" y="880" width="300" height="150" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-37" value="&lt;div style=&quot;line-height: 200%;&quot;&gt;&lt;div align=&quot;center&quot;&gt;&lt;b&gt;Light&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ul&gt;&lt;li&gt;_Ready() - adds group to &quot;lights&quot; group&lt;/li&gt;&lt;li&gt;ToggleLight() - toggles On State and light sprite between on and off state.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="345" y="1100" width="445" height="180" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-43" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" edge="1" parent="1" source="gzoKoLbx1u-RwGfraSK8-40" target="gzoKoLbx1u-RwGfraSK8-41">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-40" value="&lt;div style=&quot;line-height: 200%;&quot;&gt;&lt;div align=&quot;center&quot;&gt;&lt;b&gt;Settings&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ul&gt;&lt;li&gt;Parent class node for settings UI elements. Maintains a reference to the SpeciesManager node and the SpeciesSelect dropdown&lt;/li&gt;&lt;li&gt;_Ready() - enables input handling, just listens for &quot;toggle_settings&quot; to hide/show the settings menu&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="1050" y="50" width="430" height="170" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-44" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="gzoKoLbx1u-RwGfraSK8-41" target="gzoKoLbx1u-RwGfraSK8-42">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-41" value="&lt;div style=&quot;line-height: 200%;&quot;&gt;&lt;div align=&quot;center&quot;&gt;&lt;b&gt;Sliders&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ul&gt;&lt;li&gt;Defines sliders and their min, max, default, and step size values&lt;/li&gt;&lt;li&gt;Has a reference to the settings node to get the species select node&lt;/li&gt;&lt;li&gt;Maintains a dictionary of slider nodes using their name as a key&lt;/li&gt;&lt;li&gt;Keeps track of the currently selected species&lt;/li&gt;&lt;li&gt;_updatingSettings prevents unintentional value updates on sliders when changing species&lt;/li&gt;&lt;li&gt;_Ready() - checks nodes and calls create sliders&lt;/li&gt;&lt;li&gt;CreateSliders() - Creates a slider for each SliderDefinition in _slidersList, adds it to the _sliderDict, and calls the slider Init() function. Also adds an OnSliderChanged listener for it&#39;s ValueChanged Custom signal&lt;/li&gt;&lt;li&gt;UpdateSpecies() - updates the _species variable, and calls UpdateSlidersFromSpecies()&lt;/li&gt;&lt;li&gt;UpdateSlidersFromSpecies() - enables the _updatingSettings variable, preventing signals from being sent and changes all sliders to match the values associated with the new species.&lt;/li&gt;&lt;li&gt;SetSliderNoSignal() - updates the provided slider with it&#39;s new value without emitting it&#39;s signal&lt;/li&gt;&lt;li&gt;OnSliderValueChanged() - if it&#39;s a speed slider ensures that min isn&#39;t bigger than max or vice versa, then calls the _speciesNode Update function&lt;/li&gt;&lt;li&gt;ValidateSpeeds() - Verifies the min and max speeds are appropriately set and slides them appropriately if it was going to enter an invalid configuration&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="990" y="360" width="550" height="470" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-42" value="&lt;div style=&quot;line-height: 200%;&quot;&gt;&lt;div align=&quot;center&quot;&gt;&lt;b&gt;SliderGroup&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ul&gt;&lt;li&gt;Label + slider in a vbox, blueprint for sliders&lt;/li&gt;&lt;li&gt;Defines custom signal delegate &quot;ValueChangedEventHandler&quot; that allows us to send a custom signal to the signals node containing the name of the slider and it&#39;s new value. only sends if _updatingSliders is false, preventing slider values from being accidentally changed during a species change. Always updates the slider label.&lt;/li&gt;&lt;li&gt;Init() - sets sliderdefinition values from the provided definition and duplicates those settings to the slide&lt;/li&gt;&lt;li&gt;SetValueNoSignal() - Called when changing species, sets the _updatingSliders variable to true before updating the slider value to stop the ValueChanged Signal from being emitted.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="1050" y="970" width="430" height="350" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-45" value="&lt;div style=&quot;line-height: 200%;&quot;&gt;&lt;div align=&quot;center&quot;&gt;&lt;b&gt;SpeciesSelect&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ul&gt;&lt;li&gt;SpeciesDropdown in the settings menu&lt;/li&gt;&lt;li&gt;Defines a custom signal delegate for the dropdown changing&lt;/li&gt;&lt;li&gt;_Ready() - Calls PopulateSpeciesSelect() deferred&lt;/li&gt;&lt;li&gt;PopulateSpeciesSelect() - Adds an entry in the dropdown for each species in the SpeciesNodeDict (from the SpeciesManagerNode). Adds metadata to each entry so the species Key is stored - ensures using same key, potential name changes on the node in the future.&lt;/li&gt;&lt;li&gt;Adds a listener for the ItemSelected signal - OnSpeciesSelected&lt;/li&gt;&lt;li&gt;Selects the first entry if there are any&lt;/li&gt;&lt;li&gt;OnSpeciesSelected() gets the metadata for the selected index (same key as SpeciesNodeDict). If the _speciesManagerNode Dict has that key, call the SetActiveSpecies() function on the manager node and emit the SpeciesChangedSignal (consumed by Sliders.cs)&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="420" y="350" width="430" height="430" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-46" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=0.495;entryY=0.02;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="1" source="gzoKoLbx1u-RwGfraSK8-40" target="gzoKoLbx1u-RwGfraSK8-45">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="gzoKoLbx1u-RwGfraSK8-47" value="&lt;div style=&quot;line-height: 200%;&quot;&gt;&lt;div align=&quot;center&quot;&gt;&lt;b&gt;Help&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ul&gt;&lt;li&gt;Help splashscreen that displays keybinds&lt;/li&gt;&lt;li&gt;_Ready() - Calls PopulateKeybinds(), Sets input handling to true (just to catch &quot;toggle_help&quot;) and calld AddCloseButton()&lt;/li&gt;&lt;li&gt;PopulateKeybinds() - calls AddKeybind() for all of our input actions (ignores default &quot;ui&quot; ones)&lt;/li&gt;&lt;li&gt;AddKeybind() - Adds an hbox, and 2 labels for each keybind, translates them to a readable string and appends it to the parent vbox&lt;/li&gt;&lt;li&gt;AddCloseButton() - Adds a close button that sets Help&#39;s visible status to false when clicked&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="600" y="1530" width="430" height="280" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
